{"version":3,"sources":["utils/forms/validateFields.js","shared/components/form-elements/input/input-styles.js","shared/components/form-elements/input/input.js","shared/components/form-elements/input/index.js","shared/components/ui-elements/modal/modal-styles.js","shared/components/ui-elements/modal/modal.js","shared/components/ui-elements/modal/index.js","shared/components/form-elements/image-upload/image-upload-styles.js","shared/components/form-elements/image-upload/image-upload.js","shared/components/form-elements/image-upload/index.js","profile/components/profile-settings/profile-settings-styles.js","profile/components/change-password-form/change-password-form-styles.js","profile/components/change-password-form/change-password-form.js","profile/components/change-password-form/index.js","profile/components/profile-settings/profile-settings.js","profile/components/profile-settings/index.js","profile/containers/profile-container.js"],"names":["validateField","value","preValidators","validators","isValid","validatedValue","preValidator","length","validator","styles","theme","container","width","padding","color","textColor","fontFamily","defaultFontStack","inputItem","display","outline","border","background","defaultBgColor","borderRadius","transition","inputFocusColor","inputTextarea","height","resize","inputInvalid","errorMessage","margin","labelItem","fontWeight","textTransform","Input","props","label","classes","elementType","isTouched","errorMsg","config","onInput","element","className","clsx","onChange","defaultProps","withStyles","modal","zIndex","position","top","left","bgColor","boxShadow","modalHeader","backgroundColor","modalContent","modalFooter","justifyContent","modalEnter","transform","opacity","modalEnterActive","modalExit","modalExitActive","ModalOverlay","headerTitle","onSubmitHandler","footerContent","children","content","onSubmit","e","preventDefault","ReactDOM","createPortal","document","getElementById","onCancel","show","onClick","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","enter","enterActive","exit","exitActive","Modal","imageUploadPreview","alignItems","textAlign","marginBottom","imagePreviewBgColor","objectFit","ImageUpload","state","previewUrl","file","filePickerRef","createRef","onFileChange","target","files","setState","pickImageHandler","current","click","componentDidUpdate","fileReader","FileReader","onload","result","readAsDataURL","saveProfileImage","formData","FormData","append","onImageUpload","render","ref","type","style","accept","imageUpload","src","alt","title","Button","variant","startIcon","PureComponent","formContainer","maxWidth","divider","ChangePasswordForm","placeholder","str","isEmpty","toLowerCase","includes","areEquals","isFormValid","currentPassword","newPassword","onPasswordChange","onChangeHandler","inputName","updatedFormElement","relatedField","Object","entries","formElements","key","data","push","id","signUpForm","map","item","isPassVisible","submitButton","Component","Alert","elevation","ProfileSettings","hasError","onErrorAlertClose","onSuccessAlertClose","isErrorOpen","isSuccessOpen","isModalVisible","onModalOpen","onModalClose","onDeleteProfile","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","message","ProfileContainer","isSuccessAlertOpen","isErrorAlertOpen","prevProps","isEqual","actionCompletedSuccessfully","onModalOpenHandler","onDeleteProfileHandler","deleteProfile","onModalCloseHandler","onErrorAlertCloseHandler","onSuccessAlertCloseHandler","onImageUploadHandler","updateProfileImage","onPasswordChangeHandler","changeProfilePassword","connect","profile","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/17.b0e7d0f5.chunk.js","sourcesContent":["const validateField = (value, preValidators, validators) => {\r\n  let isValid = true;\r\n  let validatedValue = value;\r\n\r\n  if (preValidators) {\r\n    for (const preValidator of preValidators) {\r\n      validatedValue = preValidator(value);\r\n    }\r\n  }\r\n\r\n  if (validators.length === 0) {\r\n    return validatedValue;\r\n  }\r\n\r\n  for (const validator of validators) {\r\n    isValid = validator(validatedValue) && isValid;\r\n  }\r\n\r\n  if (preValidators) {\r\n    return [validatedValue, isValid];\r\n  }\r\n  return isValid;\r\n};\r\n\r\nexport default validateField;\r\n","const styles = theme => ({\r\n  container: {\r\n    width: '100%',\r\n    padding: '10px 0',\r\n    color: theme.textColor,\r\n    fontFamily: `Lato, ${theme.defaultFontStack}`\r\n  },\r\n  inputItem: {\r\n    width: '100%',\r\n    display: 'block',\r\n    padding: '7px 10px',\r\n    outline: 'none',\r\n    border: '1px solid #ccc',\r\n    background: theme.defaultBgColor,\r\n    fontFamily: 'inherit',\r\n    borderRadius: '5px',\r\n    color: theme.textColor,\r\n    transition: 'border-color 0.5s ease-in, background 0.5s ease-in',\r\n    '&:focus': {\r\n      background: theme.inputFocusColor\r\n    }\r\n  },\r\n  inputTextarea: {\r\n    height: '100px',\r\n    resize: 'none'\r\n  },\r\n  inputInvalid: {\r\n    border: '2px solid red'\r\n  },\r\n  errorMessage: {\r\n    color: 'red',\r\n    margin: '2px 0'\r\n  },\r\n  labelItem: {\r\n    fontWeight: 'bold',\r\n    display: 'block',\r\n    textTransform: 'capitalize',\r\n    fontFamily: 'inherit',\r\n    margin: '0 0 8px 0'\r\n  }\r\n});\r\n\r\nexport default styles;\r\n","import React from 'react';\r\nimport styles from './input-styles';\r\nimport withStyles from 'react-jss';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nconst Input = (props) => {\r\n  const {\r\n    label,\r\n    classes,\r\n    elementType,\r\n    value,\r\n    isValid,\r\n    isTouched,\r\n    errorMsg,\r\n    config,\r\n    onInput\r\n  } = props;\r\n\r\n  let element = null;\r\n  switch (elementType) {\r\n    case 'input':\r\n      element = <input\r\n        {...config}\r\n        className={clsx({\r\n          [classes.inputItem]: true,\r\n          [classes.inputInvalid]: !isValid && isTouched\r\n        })}\r\n        value={value}\r\n        onChange={onInput}\r\n      />;\r\n      break;\r\n    case 'textarea':\r\n      element = <textarea\r\n        {...config}\r\n        className={clsx({\r\n          [classes.inputItem]: true,\r\n          [classes.inputTextarea]: true,\r\n          [classes.inputInvalid]: !isValid && isTouched\r\n        })}\r\n        value={value}\r\n        onChange={onInput}\r\n      />;\r\n      break;\r\n    default:\r\n      element = <input\r\n        {...config}\r\n        className={clsx({\r\n          [classes.inputItem]: true,\r\n          [classes.inputInvalid]: !isValid && isTouched\r\n        })}\r\n        value={value}\r\n        onChange={onInput}\r\n      />;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <label className={classes.labelItem}>{label}</label>\r\n      {element}\r\n      {/* <VisibilityOutlinedIcon /> */}\r\n      {!isValid && isTouched && <p className={classes.errorMessage}>{errorMsg}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  isValid: PropTypes.bool.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  elementType: PropTypes.string,\r\n  isTouched: PropTypes.bool.isRequired,\r\n  errorMsg: PropTypes.string,\r\n  config: PropTypes.object.isRequired,\r\n  onInput: PropTypes.func.isRequired\r\n};\r\n\r\nInput.defaultProps = {\r\n  errorMsg: 'Invalid input'\r\n};\r\n\r\nexport default withStyles(styles)(Input);\r\n","import Input from './input';\r\nexport default Input;\r\n","const styles = theme => ({\r\n  modal: {\r\n    zIndex: '100',\r\n    position: 'fixed',\r\n    color: theme.textColor,\r\n    top: '22vh',\r\n    left: '10%',\r\n    fontFamily: 'Open Sans, sans-serif',\r\n    width: '80%',\r\n    background: theme.bgColor,\r\n    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.26)',\r\n    borderRadius: '8px'\r\n  },\r\n  modalHeader: {\r\n    width: '100%',\r\n    padding: '1rem 0.5rem',\r\n    backgroundColor: '#3f51b5',\r\n    color: 'white',\r\n    '& h2': {\r\n      margin: '0.5rem'\r\n    }\r\n  },\r\n  modalContent: {\r\n    padding: '1rem 0.5rem'\r\n  },\r\n  modalFooter: {\r\n    padding: '1rem 0.5rem',\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    '& button': {\r\n      margin: '0 0 0 20px'\r\n    }\r\n  },\r\n  '@media (min-width: 768px)': {\r\n    modal: {\r\n      left: 'calc(50% - 20rem)',\r\n      width: '40rem'\r\n    }\r\n  },\r\n  modalEnter: {\r\n    transform: 'translateY(-10rem)',\r\n    opacity: 0\r\n  },\r\n  modalEnterActive: {\r\n    transform: 'translateY(0)',\r\n    opacity: 1,\r\n    transition: 'all 200ms'\r\n  },\r\n  modalExit: {\r\n    transform: 'translateY(0)',\r\n    opacity: 1\r\n  },\r\n  modalExitActive: {\r\n    transform: 'translateY(-10rem)',\r\n    opacity: 0,\r\n    transition: 'all 200ms'\r\n  }\r\n});\r\n\r\nexport default styles;\r\n","import React, { Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './modal-styles';\r\nimport withStyles from 'react-jss';\r\nimport Backdrop from '../backdrop';\r\n\r\nconst ModalOverlay = ({ headerTitle, classes, onSubmitHandler, footerContent, children }) => {\r\n  const content = (\r\n    <div className={classes.modal}>\r\n      <header className={classes.modalHeader}>\r\n        <h2>{headerTitle}</h2>\r\n      </header>\r\n      <form onSubmit={onSubmitHandler || (e => e.preventDefault())}>\r\n        <div className={classes.modalContent}>\r\n          {children}\r\n        </div>\r\n        <footer className={classes.modalFooter}>\r\n          {footerContent}\r\n        </footer>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = (props) => {\r\n  const { classes, onCancel, show } = props;\r\n  return (\r\n    <Fragment>\r\n      {show && <Backdrop onClick={onCancel}/>}\r\n      <CSSTransition\r\n        in={show}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={250}\r\n        classNames={{\r\n          enter: classes.modalEnter,\r\n          enterActive: classes.modalEnterActive,\r\n          exit: classes.modalExit,\r\n          exitActive: classes.modalExitActive\r\n        }}>\r\n        <ModalOverlay {...props} />\r\n      </CSSTransition>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  show: PropTypes.bool,\r\n  onCancel: PropTypes.func,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Modal);\r\n","import Modal from './modal';\r\nexport default Modal;\r\n","const styles = theme => ({\r\n  imageUploadPreview: {\r\n    width: '13rem',\r\n    height: '13rem',\r\n    border: '1px solid #ccc',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    marginBottom: '1rem',\r\n    color: 'white',\r\n    fontFamily: theme.defaultFontStack,\r\n    backgroundColor: theme.imagePreviewBgColor,\r\n    '& img': {\r\n      width: '100%',\r\n      borderRadius: '50%',\r\n      height: '100%',\r\n      objectFit: 'cover'\r\n    }\r\n  },\r\n  container: {\r\n    '& button': {\r\n      margin: '0 10px 10px 0'\r\n    }\r\n  }\r\n});\r\n\r\nexport default styles;\r\n","import React, { PureComponent, createRef } from 'react';\r\nimport withStyles from 'react-jss';\r\nimport styles from './image-upload-styles';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ImageUpload extends PureComponent {\r\n  state = {\r\n    previewUrl: null,\r\n    file: null,\r\n    isValid: true\r\n  }\r\n\r\n  filePickerRef = createRef();\r\n\r\n  onFileChange = (e) => {\r\n    if (e.target.files && e.target.files.length === 1) {\r\n      this.setState({\r\n        file: e.target.files[0],\r\n        isValid: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isValid: false\r\n      });\r\n    }\r\n  }\r\n\r\n  pickImageHandler = () => {\r\n    this.filePickerRef.current.click();\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    if (this.state.file) {\r\n      const fileReader = new FileReader();\r\n      fileReader.onload = () => {\r\n        this.setState({\r\n          previewUrl: fileReader.result\r\n        });\r\n      };\r\n      fileReader.readAsDataURL(this.state.file);\r\n    }\r\n  }\r\n\r\n  saveProfileImage = () => {\r\n    if (this.state.file) {\r\n      const formData = new FormData();\r\n      formData.append('profile-image', this.state.file);\r\n      this.props.onImageUpload(formData);\r\n      this.setState({\r\n        file: null\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isValid: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const { previewUrl, isValid } = this.state;\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.container}>\r\n        <input\r\n          ref={this.filePickerRef}\r\n          type=\"file\"\r\n          style={{ display: 'none' }}\r\n          accept=\".jpg, .png, .jpeg\"\r\n          onChange={this.onFileChange}\r\n        />\r\n        <div className={classes.imageUpload}>\r\n          <div className={classes.imageUploadPreview}>\r\n            {previewUrl && <img src={previewUrl} alt=\"Preview\" title=\"Profile preview\"/>}\r\n            {!previewUrl && <p>Please pick an image</p>}\r\n          </div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            startIcon={<AddAPhotoIcon />}\r\n            onClick={this.pickImageHandler}\r\n          >\r\n            Pick an image\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n            onClick={this.saveProfileImage}\r\n          >\r\n            Save\r\n          </Button>\r\n          {!isValid && <p>Please, choose a file.</p>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageUpload.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  hasError: PropTypes.object,\r\n  onImageUpload: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(ImageUpload);\r\n","import ImageUpload from './image-upload';\r\nexport default ImageUpload;\r\n","const styles = theme => ({\r\n  container: {\r\n    width: '50vw',\r\n    margin: '20px auto',\r\n    padding: '25px',\r\n    borderRadius: '40px',\r\n    fontFamily: theme.defaultFontStack,\r\n    backgroundColor: theme.defaultBgColor,\r\n    color: theme.textColor,\r\n    transition: 'background-color 0.5s ease-in',\r\n    '& h1': {\r\n      margin: '10px 0'\r\n    },\r\n    '& p': {\r\n      margin: '0 0 10px 0'\r\n    },\r\n    '& label': {\r\n      textTransform: 'none'\r\n    },\r\n    '& label::firs-letter': {\r\n      textTransform: 'uppercase'\r\n    }\r\n  },\r\n  formContainer: {\r\n    width: '80%',\r\n    maxWidth: '500px'\r\n  },\r\n  divider: {\r\n    height: '3px',\r\n    backgroundColor: 'rgba(169,169,169, 0.8)',\r\n    borderRadius: '10px',\r\n    margin: '15px 0'\r\n  },\r\n  '@media (max-width: 768px)': {\r\n    container: {\r\n      width: '80vw'\r\n    }\r\n  }\r\n});\r\n\r\nexport default styles;\r\n","const styles = {\r\n  errorMessage: {\r\n    textAlign: 'center',\r\n    borderRadius: '10px',\r\n    backgroundColor: '#DC143C',\r\n    padding: '10px',\r\n    margin: '15px 0',\r\n    color: 'white'\r\n  }\r\n};\r\n\r\nexport default styles;\r\n","import React, { Component } from 'react';\r\nimport styles from './change-password-form-styles';\r\nimport withStyles from 'react-jss';\r\nimport Input from '../../../shared/components/form-elements/input';\r\nimport { isEmpty } from 'validator';\r\nimport validateField from '../../../utils/forms/validateFields';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nconst CURRENT_PASSWORD = 'Current password';\r\nconst NEW_PASSWORD = 'New password';\r\nconst NEW_PASSWORD_REPEAT = 'Repeat new password';\r\n\r\nclass ChangePasswordForm extends Component {\r\n  state = {\r\n    formData: {\r\n      [CURRENT_PASSWORD]: {\r\n        elementType: 'input',\r\n        config: {\r\n          type: 'password',\r\n          placeholder: 'Current password'\r\n        },\r\n        preValidators: [],\r\n        validators: [\r\n          (str) => !isEmpty(str)\r\n        ],\r\n        isValid: false,\r\n        isTouched: false,\r\n        errorMsg: 'Please input your current password',\r\n        value: ''\r\n      },\r\n      [NEW_PASSWORD]: {\r\n        elementType: 'input',\r\n        config: {\r\n          type: 'password',\r\n          placeholder: 'New password'\r\n        },\r\n        preValidators: [],\r\n        validators: [\r\n          (str) => !isEmpty(str),\r\n          (str) => str.length >= 8,\r\n          (str) => !str.toLowerCase().includes('password')\r\n        ],\r\n        isValid: false,\r\n        isTouched: false,\r\n        errorMsg: 'Password cannot contain \"password\" string and min length is 8',\r\n        value: ''\r\n      },\r\n      [NEW_PASSWORD_REPEAT]: {\r\n        elementType: 'input',\r\n        config: {\r\n          type: 'password',\r\n          placeholder: 'Repeat new password'\r\n        },\r\n        preValidators: [],\r\n        validators: [\r\n          (str) => !isEmpty(str),\r\n          (str) => str.length >= 8,\r\n          (str) => !str.toLowerCase().includes('password')\r\n        ],\r\n        isValid: false,\r\n        isTouched: false,\r\n        errorMsg: 'Password cannot contain \"password\" string and min length is 8',\r\n        value: ''\r\n      }\r\n    },\r\n    areEquals: true,\r\n    isFormValid: false\r\n  }\r\n\r\n  onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.isFormValid) {\r\n      const formData = {\r\n        currentPassword: this.state.formData[CURRENT_PASSWORD].value,\r\n        newPassword: this.state.formData[NEW_PASSWORD].value\r\n      };\r\n      this.props.onPasswordChange(formData);\r\n    }\r\n  }\r\n\r\n  onChangeHandler = (e, inputName) => {\r\n    const value = e.target.value;\r\n    const preValidators = this.state.formData[inputName].preValidators;\r\n    const validators = this.state.formData[inputName].validators;\r\n    const [validatedValue, isValid] = validateField(value, preValidators, validators);\r\n    const formData = { ...this.state.formData };\r\n    const updatedFormElement = formData[inputName] = {\r\n      ...formData[inputName],\r\n      isValid,\r\n      value: validatedValue || value,\r\n      isTouched: true\r\n    };\r\n    let areEquals = true;\r\n    if (inputName === NEW_PASSWORD || inputName === NEW_PASSWORD_REPEAT) {\r\n      const relatedField = inputName === NEW_PASSWORD ? NEW_PASSWORD_REPEAT : NEW_PASSWORD;\r\n      if (updatedFormElement.value !== this.state.formData[relatedField].value) {\r\n        areEquals = false;\r\n      } else {\r\n        areEquals = true;\r\n      }\r\n    }\r\n\r\n    formData[inputName] = updatedFormElement;\r\n\r\n    let isFormValid = true;\r\n    for (const [, data] of Object.entries(formData)) {\r\n      isFormValid = data.isValid && isFormValid;\r\n    }\r\n\r\n    this.setState({\r\n      formData,\r\n      isFormValid: isFormValid && areEquals,\r\n      areEquals\r\n    });\r\n  }\r\n\r\n  render = () => {\r\n    const { classes } = this.props;\r\n    const { areEquals } = this.state;\r\n    const formElements = [];\r\n    for (const [key, data] of Object.entries(this.state.formData)) {\r\n      formElements.push({\r\n        id: key,\r\n        elementType: data.elementType,\r\n        config: data.config,\r\n        value: data.value,\r\n        isValid: data.isValid,\r\n        isTouched: data.isTouched,\r\n        errorMsg: data.errorMsg\r\n      });\r\n    }\r\n    return (\r\n      <div className={classes.container}>\r\n        <form className={classes.signUpForm} onSubmit={this.onSubmitHandler}>\r\n          {formElements.map(item => {\r\n            return (\r\n              <Input\r\n                label={item.id}\r\n                key={item.id}\r\n                elementType={item.elementType}\r\n                config={item.config}\r\n                value={item.value}\r\n                isValid={item.isValid}\r\n                isTouched={item.isTouched}\r\n                errorMsg={item.errorMsg}\r\n                isPassVisible={item.isPassVisible}\r\n                onInput={(e) => this.onChangeHandler(e, item.id) }\r\n              />\r\n            );\r\n          })}\r\n          {!areEquals && <div className={classes.errorMessage}>Passwords are not equals.</div>}\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n            className={classes.submitButton}\r\n            onClick={this.onSubmitHandler}\r\n          >\r\n            Save\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nChangePasswordForm.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onPasswordChange: PropTypes.func.isRequired,\r\n  hasError: PropTypes.object\r\n};\r\n\r\nexport default withStyles(styles)(ChangePasswordForm);\r\n","import ChangePasswordForm from './change-password-form';\r\nexport default ChangePasswordForm;\r\n","import React, { Fragment } from 'react';\r\nimport ImageUpload from '../../../shared/components/form-elements/image-upload';\r\nimport withStyles from 'react-jss';\r\nimport styles from './profile-settings-styles';\r\nimport PropTypes from 'prop-types';\r\nimport ChangePasswordForm from '../change-password-form';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Modal from '../../../shared/components/ui-elements/modal';\r\n\r\nconst Alert = (props) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nconst ProfileSettings = (props) => {\r\n  const {\r\n    classes, onImageUpload, onPasswordChange, hasError,\r\n    onErrorAlertClose, onSuccessAlertClose, isErrorOpen, isSuccessOpen,\r\n    isModalVisible, onModalOpen, onModalClose, onDeleteProfile\r\n  } = props;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h1>Settings</h1>\r\n      <p>Here you can change your profile settings including image, password, email or even delete your accout.</p>\r\n\r\n      <div className={classes.divider}></div>\r\n\r\n      <h2>Profile image</h2>\r\n      <p>Please, pick one image with one of the following extensions (.jpg, .png, .jpeg).</p>\r\n      <ImageUpload\r\n        onImageUpload={onImageUpload}\r\n      />\r\n\r\n      <div className={classes.divider}></div>\r\n\r\n      <h2>Change password</h2>\r\n      <p>Your password must be at least 8 characters long and cannot contain word &quot;password&quot;.</p>\r\n      <div className={classes.formContainer}>\r\n        <ChangePasswordForm\r\n          onPasswordChange={onPasswordChange}\r\n        />\r\n      </div>\r\n\r\n      <h2>Delete profile</h2>\r\n      <p>To delete your profile click on the button below.</p>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        startIcon={<DeleteIcon />}\r\n        onClick={onModalOpen}\r\n      >\r\n        Delete profile\r\n      </Button>\r\n\r\n      <Snackbar\r\n        open={isSuccessOpen}\r\n        autoHideDuration={6000}\r\n        onClose={onSuccessAlertClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\r\n        <Alert\r\n          onClose={onSuccessAlertClose}\r\n          severity=\"success\"\r\n        >\r\n         Settings successfully updated!\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Snackbar\r\n        open={isErrorOpen}\r\n        autoHideDuration={6000}\r\n        onClose={onErrorAlertClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\r\n        <Alert\r\n          onClose={onErrorAlertClose}\r\n          severity=\"error\"\r\n        >\r\n          {hasError && hasError.message}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Modal\r\n        show={isModalVisible}\r\n        onCancel={onModalClose}\r\n        headerTitle=\"Are you sure?\"\r\n        footerContent={\r\n          <Fragment>\r\n            <Button\r\n              onClick={onModalClose}\r\n              variant=\"contained\"\r\n              color=\"secondary\">\r\n                Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={onDeleteProfile}\r\n              variant=\"contained\"\r\n              color=\"primary\">\r\n                Delete\r\n            </Button>\r\n          </Fragment>\r\n        }>\r\n        <p>{`\r\n          Do you REALLY want to delete your profile? Your comments won't \r\n          be deleted, so as your likes/dislikes.\r\n          Please note that this action cannot be undone.`\r\n        } </p>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileSettings.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  isSuccessOpen: PropTypes.bool.isRequired,\r\n  isErrorOpen: PropTypes.bool.isRequired,\r\n  isModalVisible: PropTypes.bool.isRequired,\r\n  onModalOpen: PropTypes.func.isRequired,\r\n  onModalClose: PropTypes.func.isRequired,\r\n  onDeleteProfile: PropTypes.func.isRequired,\r\n  hasError: PropTypes.object,\r\n  onImageUpload: PropTypes.func.isRequired,\r\n  onErrorAlertClose: PropTypes.func.isRequired,\r\n  onSuccessAlertClose: PropTypes.func.isRequired,\r\n  onPasswordChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(ProfileSettings);\r\n","import ProfileSettings from './profile-settings';\r\nexport default ProfileSettings;\r\n","import React, { Component } from 'react';\r\nimport ProfileSettings from '../components/profile-settings';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { updateProfileImage, changeProfilePassword, deleteProfile } from '../../redux/actions/profile-actions/profile-actions';\r\nimport PropTypes from 'prop-types';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nclass ProfileContainer extends Component {\r\n  state = {\r\n    isSuccessAlertOpen: false,\r\n    isErrorAlertOpen: false,\r\n    isModalVisible: false\r\n  }\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    if (!isEqual(this.props.hasError, prevProps.hasError) && this.props.hasError && !this.state.isErrorAlertOpen) {\r\n      this.setState({\r\n        isErrorAlertOpen: true\r\n      });\r\n    }\r\n    if (prevProps.actionCompletedSuccessfully !== this.props.actionCompletedSuccessfully && !this.state.isSuccessAlertOpen) {\r\n      this.setState({\r\n        isSuccessAlertOpen: true\r\n      });\r\n    }\r\n  }\r\n\r\n  onModalOpenHandler = () => {\r\n    this.setState({\r\n      isModalVisible: true\r\n    });\r\n  }\r\n\r\n  onDeleteProfileHandler = () => {\r\n    this.props.deleteProfile();\r\n    this.onModalCloseHandler();\r\n  }\r\n\r\n  onModalCloseHandler = () => {\r\n    this.setState({\r\n      isModalVisible: false\r\n    });\r\n  }\r\n\r\n  onErrorAlertCloseHandler = () => {\r\n    this.setState({\r\n      isErrorAlertOpen: false\r\n    });\r\n  }\r\n\r\n  onSuccessAlertCloseHandler = () => {\r\n    this.setState({\r\n      isSuccessAlertOpen: false\r\n    });\r\n  }\r\n\r\n  onImageUploadHandler = (formData) => {\r\n    this.props.updateProfileImage(formData);\r\n  }\r\n\r\n  onPasswordChangeHandler = (formData) => {\r\n    this.props.changeProfilePassword(formData);\r\n  }\r\n\r\n  render = () => {\r\n    const { hasError } = this.props;\r\n    const { isErrorAlertOpen, isSuccessAlertOpen, isModalVisible } = this.state;\r\n    return (\r\n      <ProfileSettings\r\n        isSuccessOpen={isSuccessAlertOpen}\r\n        isErrorOpen={isErrorAlertOpen}\r\n        onErrorAlertClose={this.onErrorAlertCloseHandler}\r\n        onSuccessAlertClose={this.onSuccessAlertCloseHandler}\r\n        hasError={hasError}\r\n        onImageUpload={this.onImageUploadHandler}\r\n        onPasswordChange={this.onPasswordChangeHandler}\r\n        isModalVisible={isModalVisible}\r\n        onModalOpen={this.onModalOpenHandler}\r\n        onModalClose={this.onModalCloseHandler}\r\n        onDeleteProfile={this.onDeleteProfileHandler}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  profile: { hasError, actionCompletedSuccessfully }\r\n}) => {\r\n  return {\r\n    hasError,\r\n    actionCompletedSuccessfully\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators({\r\n    updateProfileImage,\r\n    changeProfilePassword,\r\n    deleteProfile\r\n  }, dispatch);\r\n};\r\n\r\nProfileContainer.propTypes = {\r\n  hasError: PropTypes.object,\r\n  updateProfileImage: PropTypes.func.isRequired,\r\n  changeProfilePassword: PropTypes.func.isRequired,\r\n  actionCompletedSuccessfully: PropTypes.bool.isRequired,\r\n  deleteProfile: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileContainer);\r\n"],"sourceRoot":""}